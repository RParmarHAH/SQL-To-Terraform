resource "snowflake_procedure" "DW_HAH_GET_STAGE_CLEARCARE_FACT_VISIT_TASK" {
	name ="GET_STAGE_CLEARCARE_FACT_VISIT_TASK"
	database = "DW_${var.SF_ENVIRONMENT}"
	schema = "HAH"
	language  = "SQL"

	arguments {
		name = "STR_ETL_TASK_KEY"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_START"
		type = "VARCHAR(16777216)"
}	

	arguments {
		name = "STR_CDC_END"
		type = "VARCHAR(16777216)"
}	
	return_type = "VARCHAR(16777216)"
	execute_as = "OWNER"
	statement = <<-EOT 

DECLARE
    return_result VARCHAR;
BEGIN
--*****************************************************************************************************************************
-- NAME:  Clear care FACT VISIT TASK
--
-- PURPOSE: Populates Stage FACT VISIT TASK for Clear Care 
--			
--
-- DEVELOPMENT LOG:
-- DATE        AUTHOR                NOTES:
-- --------    -------------------   -----------------------------------------------------------------------------------------------
-- 01/12/23	   Ayshwarya			Initial version
--*****************************************************************************************************************************
INSERT OVERWRITE INTO STAGE.CLEARCARE_FACT_VISIT_TASK
WITH EMPLOYEE AS 
(
	SELECT
		*
	FROM
		(
		SELECT
			CAREGIVER_ID,
			MASTER_ID,
			AGENCY_ID
		FROM
			DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.EMPLOYEE_MASTER_LIST
	)
	UNION
	SELECT
		*
	FROM
		(
		SELECT
			DISTINCT CAREGIVER_ID,
			MASTER_ID,
			AGENCY_ID
		FROM
			DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.EMPLOYEE_MATCH_LIST
		WHERE
			CAREGIVER_ID NOT IN (
			SELECT
				CAREGIVER_ID
			FROM
				DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.EMPLOYEE_MASTER_LIST ) 
	) 
)
,
	CLIENT AS
(
	SELECT
		*
	FROM
		(
		SELECT
			PATIENT_ID,
			MASTER_ID,
			AGENCY_ID,
			LAST_NAME,
			FIRST_NAME
		FROM
			DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.CLIENT_MASTER_LIST 
	)
	UNION
	SELECT
		*
	FROM
		(
		SELECT
			DISTINCT PATIENT_ID,
			MASTER_ID,
			AGENCY_ID,
			LAST_NAME,
			FIRST_NAME
		FROM
			DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.CLIENT_MATCH_LIST
		WHERE
			PATIENT_ID NOT IN (
			SELECT
				PATIENT_ID
			FROM
				DISC_DEDUPE_${var.SF_ENVIRONMENT}.CLEARCARE.CLIENT_MASTER_LIST ) 
	)
)
SELECT DISTINCT 
	 MD5(CA.AGENCY_ID || ''-'' || CA.ID || ''-'' || ''CLEARCARE'' || ''-'' || UPPER(CAT.TITLE) ) AS VISIT_TASK_KEY
	,CA.SHIFT_DATE AS REPORT_DATE
    ,MD5(''CLEARCARE'' || ''-'' || UPPER(CAT.TITLE)) AS TASK_KEY
 	,MD5(CA.AGENCY_ID || ''-'' || CA.ID || ''-'' || '' CLEARCARE'') AS VISIT_KEY
	,MD5(''CLEARCARE'' || ''-'' || EM.MASTER_ID::INT  || ''-'' || ''CLEARCARE'') AS EMPLOYEE_KEY
	,MD5(''CLEARCARE'' ||''-''|| CL.MASTER_ID::INT ||''-''|| ''CLEARCARE'' ) as CLIENT_KEY
    ,EM.MASTER_ID::INT AS EMPLOYEE_ID
    ,CL.PATIENT_ID AS CLIENT_NUMBER
    ,16 AS SOURCE_SYSTEM_ID
    ,''CLEARCARE'' AS SYSTEM_CODE
	, CA.SHIFT_DATE AS SERVICE_DATE
 	, NULL AS TASK_ID
  	, UPPER(CAT.TITLE) AS TASK_NAME
	, CASE WHEN CAT.STATUS = 1 THEN TRUE ELSE FALSE END AS COMPLETED_FLAG 
	, CASE WHEN CAT.STATUS = 1 THEN RECORDED  END AS COMPLETED_DATE
	, NULL AS REASON_CODE
	, NULL AS REASON_DESCRIPTION,
    :STR_ETL_TASK_KEY AS ETL_TASK_KEY,
        :STR_ETL_TASK_KEY AS ETL_INSERTED_TASK_KEY
                        
    , CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_INSERTED_DATE
    , CURRENT_USER as ETL_INSERTED_BY
    , CONVERT_TIMEZONE(''UTC'', CURRENT_TIMESTAMP)::TIMESTAMP_NTZ AS ETL_LAST_UPDATED_DATE
    , CURRENT_USER as ETL_LAST_UPDATED_BY
    , 0 AS ETL_DELETED_FLAG
FROM DISC_${var.SF_ENVIRONMENT}.CLEARCARE.CARELOGS_TASKLOG CAT
INNER JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.CARELOGS_CARELOG CA ON CA.ID = CAT.CARE_LOG_ID 
LEFT JOIN CLIENT CL ON CL.PATIENT_ID = CA.PATIENT_ID AND CL.AGENCY_ID = CA.AGENCY_ID
LEFT JOIN EMPLOYEE EM ON EM.CAREGIVER_ID = CA.CAREGIVER_ID AND EM.AGENCY_ID = CA.AGENCY_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.profile_patient_agencylocation AS PP ON CA.patient_id = PP.patient_id
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.BILLING_CLIENTAUTHORIZATION AU ON AU.ID = CA.AUTHORIZATION_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PROFILE_PARENTPAYER PY ON PY.ID = AU.PARENT_PAYER_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PROFILE_PARENTPAYERSERVICE SC ON SC.ID = AU.SERVICE_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.SCHEDULES_SHIFT S ON S.ID = CA.SHIFT_ID
LEFT JOIN EMPLOYEE SM ON SM.CAREGIVER_ID = S.CAREGIVER_ID AND SM.AGENCY_ID = CA.AGENCY_ID 
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.profile_patient_agencylocation AS PM ON PM.ID = PP.PRIMARY_MANAGER_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.PATIENT_PATIENT PA ON PA.ID = CA.PATIENT_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.AGENCY_AGENCYLOCATION AG ON AG.ID = PA.LOCATION_ID
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.RECEIVABLES_INVOICE_CARELOGS  R on R.CARELOG_ID  = CA.id
LEFT JOIN DISC_${var.SF_ENVIRONMENT}.CLEARCARE.INVOICE_TRANSACTION INV on INV.id = R.INVOICE_ID 
WHERE AG.AGENCY_ID IN (2459)
;
    SELECT CONCAT(''Message : '',"number of rows inserted",'' Rows Inserted.'') into :return_result FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

    return return_result;
END;
    
 EOT
}

